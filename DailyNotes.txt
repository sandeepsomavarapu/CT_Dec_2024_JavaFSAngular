Week-2
				datatype varname=value
				
					int age=
					
					byte  1 byte
					
					char 
					c,c++-->
					
					
					
						byte age@123=32;
						
						identifier
							a-z
							A-Z
							0-9
							_
							$
						
		OOPS:
			inheritance		extends implements
			abstraction		hiding -->abstract classes,interfaces-->abstract 
			encapsulation	private 
			polymorphisam	
			
					
			interface A{
			
			1000
			}	

			interface B extends A{
			
			
			}			
					
					Eclipse
					spring tool suite
					
		exception handling:
=============================

1
2........




1000		
					
					
						try,catch-->handling code,finally-->clean up,throw-->,throws
		
		String name="mahesh";
				name="rajesh"
				SOP(name);
				
				arrays
				
				String names[]={"d","c","b","a"}
				names[4]AIOE
				
				1)Homogeneous 
				2)size is fixed
				3)methods
				
				
				class A
				
				class B extends A
				
				
				class C extends B
				
				
				java.lang
				
	NOTE:
	
		1)By default parent class for every java class is java.lang.Object
		2)By default package available for every java file is java.lang
		
Collections				
				List		-->duplicate are allowed,insertion order is preserved 
				Set			-->unique	,insertion order is not followed	
				Map			-->k,v
				Queue		-->FIFO
Comparable 
Comprator
						JAVA
				JSE 					JEE 							JME
		corejava,applets,swings	  servlets,jsp,spring,webservices		android

1)standalone/desktop	
2)web application

			
Spring Framework:
==================				
					
	framework:ready made (boiler plate code )					
					
	2 types
			struts,ejb,hibernate,spring.....
		invasive	struts ,ejb:will force developer to implement predefined api
		non-invasive 	hibernate,spring::will never force developer to implement predefined api

spring is non-invasive framework,which is used to create light weight and loosley coupled apps					
					

					non-invasive
					light weight
					loosley coupled
					.java
					.class--->.jar
					
					
					Servlet
				1.implements Servlet
				2.extends GenericServlet/3.HttpServlet				
		
		class Login	extends HttpServlet(12)	
				{
				12 methods
				}	//heavy weight /light weight 
				
				
				Rod Johonson
				
				interface21-->spring light 
					
					
		loosley coupled/tightly coupled			
					
					
		class Test{
		public Test(String name)
		{
		
		}
		
		public void m1()
		{
		
		}
		
		}	

		
		class Client{
		main(){
								object life cycle -->spring container (BeanFactory/ApplicationContext)
				test.m1();
		}
		
		}					
					
					
					spring framework
						spring core	/ dependency injection module/IOC module
						spring jdbc
						spring ORM
						spring MVC
						spring web
						spring AOP
						spring rest
						spring cloud .....
						
						
					with out maven
					with maven
						
						
					configuration file	
						
Spring Core:
				setter injection  <property>
				constrctor injection <constructor-arg>
				autowiring  -->byname/bytype/constructor
						
								configuration --><beans>
								
									1.xml configuration
									2.annotation configuration
									3.java configuration		@Bean
						
	Note:Spring has given annotations for userdefined classes but not for predefined classes
																			xml	
																			java
																			
				Employee



				@Bean
				public Employee getEmployee()
				{
					return new Employee();
				}
						
						
						
			@Component
			@Configuration
			@ComponentScan
			@Value
			@Autowired
			@Scope
			@PropertySource
			@Bean
			@Qualifer
						
Spring JDBC :


Spring ORM


Spring AOP


Spring MVC

						
						
									java ---->database 
									
									
									JDBC
									
	5 steps

1)loading the driver class

2)creating the connection

3)creating the statement

4)execute the query

5)close the connection



			JDBC:
			
			Layered Architecture 
			
			
			
			Login Application					
			
			
				username				getuname/password			Database logic
				password 
						submit				
			
			UI layer/Controller layer		service layer			Repository/DAO
			
			
						.java
			
			
			
			@Service
			@Repository
			
		
		JDBC			
		
spring JDBC			-->JdbcTemplate
			
sping mvc 	:Servlets


		login

		register
		
		home
		
		inbox


sping mvc --->Front controller --->DispatcherServlet

	http://localhost:8080/projectname

//http://localhost:8080/projectname/classlevelurl/methodlevelurl
	


spring boot intro			
			
			Autoconfiguration(most of the commonly used classes already configured )
			embeded server(tomcat)
			starters(starter parent)
			actuators(URLs) /beans /config /metrics ........
			in memory DB(H2)
			
JDBC					
			
	

JPA	--->ORM--->Hibernate,eclipse link,toplink,ibatis.......
			
				select * from emp;
				
				selct eid,ename from emp;//mysql
				
				
				select empId,empName from Employee;
				

	JPA		
	hibernate:ORM

			
		@Entity	
		@Table(name="products")
		class Product 
		{
		@Id
		@GeneratedValue
		@Column(name="pid")
		private int productId;
		private String productName;.....
		
		
		}		
			
			
		configuration file(hibernate)	
			
			1.database properties  	4
										
			2.hibernate properties	3(show_sql,dialect,hbm2ddl.auto)
									
		

		junit jars
	
			src/test/java
			
			
			@Test
			@DisplayName()
			public void testCase()
			{
			
			RGR
			
			}
		
		
		
		
		String name="sleeping";
		String name1="sleeping";
		
		System.out.println(name.equals(name1));//true
		System.out.println(name==name1);//false
		
		
	Mockito:
	=========	
				controller layer      service layer       repository layer    --->DB
					
					
									addOfTwo(int a,int b)		--->		DB
										{
										int result=a+b;
										...
										....
										repo.addOfTwo()
										}
											
											
		
		testing
		
		ServiceClass service=new ServiceClass();
		
		
		service.addOfTwo(10,20)
		
		Mockito+Junit
		
	@ExtendMockito	
		
		@Mock
		RepoClass repo;
		
		@InjectMocks
		ServiceClass service;
		
		
		when(repo.addOfTwo(10,20)).thenReturn(30)
		
		service.addOfTwo(10,20)
		
		
		JPA

				@Entity
				@Id
				@Column
				@Table
				@GeneratedValue
				
				
				@OneToOne
				@OneToMany
				@ManyToOne
				@ManyToMany
			
			
			
			
			
			Database Foreign key


					RDBMS
					
		EmpDept		
		eid  ename    esal 		 edesg    		deptno   dname  dlocation
		1	  x			100		developer		10		  A		  Hyd
		2	  y			200		admin			20		  B		  Banglore
		3	  z			100		hr				30		  C		  Delhi
		4	  l			400		developer		10		  A		  Hyd
		5	  l			760		admin			20		  B		  Banglore
		
		
		
		Dept
		deptno   dname   dloc
		10			A		HYD
		20			B		Banglore
		30			C		Delhi
		
		delete from dept where deptno=10;
		
				EMP  
		eid  ename    esal 		 edesg       deptno  
		1	  x			100		developer		10		
		2	  y			200		admin			20		 
		3	  z			100		hr				30		 
		4	  l			400		developer		10		 
		5	  z			760		admin			20		 
				
			
			on delete cascasde
			
		alter table emp add constraint cts_fk foreign key(deptno)references dept(deptno);
			
	JPA
		Employee
			
			
		persistence.xml
			database properties
			hibernate properties 
			
			
		EntityManager -->persist,merge,remove,find,createQuery	
			
		Relationships


Webservices:
============
		Sp
		RMI			JAVA
		EJB
		
		DCOM	.net
		RPC		C/C++
		CORBA	
	
	SOAP
	REST

  
	Spring Boot Rest-DataJpa+HIbernate+Layered Architecture
			lombok
			logger
			sonar
			maven
			DTO
			git
			aop(logging)
			validations
			exception handling
			security
			testing
			
			microservices
	Decompose/Divide/Split large project smaller services and later communicate
				
			1.Independently developed
			2.Independently tested
			3.Independently deployed
			4.Independently scalled


Communication
				Synchronous :OTP  :HTTP(RestTemplate,Open Fiegn,Web Client)
				Asynchronous:Order Messageing Protocols(Kafka,activemq,rabbitmq....)




		RestTemplate



Config Server:

1.spring starter project
		config server dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		
		@EnableConfigServer
		@SpringBootApplication
		
		
		.properties
		
		spring.cloud.config.server.git.uri:githuburl
		port:8080
		

		microservices
		
			config client dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		
		spring.config.import=optional:configserver:http://localhost:8888

2.Eureka Server Rigistry & Discovery
			
			eureka server 
				@EnableEurekaServer
				
				.properties
					self-registry
					fetch-registry
				
				
				
			for each microservice 
			eureka discovery client
			
			
spring.application.name=ApiGateWay
eureka.instance.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
server.port=3434
management.endpoints.web.exposure.include=*


spring.cloud.gateway.routes[0].id=DEPTSERVICE
spring.cloud.gateway.routes[0].uri=lb://DEPTSERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/departments/**

spring.cloud.gateway.routes[1].id=EMPLOYEESERVICE
spring.cloud.gateway.routes[1].uri=lb://EMPLOYEESERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/employees/**
			
		Microservices:
		
		api gateway	 for single entry point
		config server for centralised config
		eureka server for serivce registry and discovery(loadbalanced)
		circuitbreaker pattern
		logging(kibana/SLK)
		jwt security
		
			best practices
				naming conventions
				comments 
				logging
				junit/mockito
				validations
				global exception handling 
				DTO
				Postman/swagger 
			
		QA
			Core Java 8 features(oops,exception handling,collections)	
			JDBC
			JPA+Hibernate
			Spring CORE
			+
			spring JDBC
			Spring MVC
			spring JPA
			SPring Data JPA
			spring Boot
			microservices(design patterns spring cloud)
			




	